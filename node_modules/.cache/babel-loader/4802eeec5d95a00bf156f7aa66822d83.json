{"ast":null,"code":"import _classCallCheck from \"/home/amit/Downloads/reactjs-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/amit/Downloads/reactjs-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/amit/Downloads/reactjs-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/amit/Downloads/reactjs-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/amit/Downloads/reactjs-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/amit/Downloads/reactjs-memory-game-master/src/components/GameBoard.js\";\nimport React, { Component } from 'react';\nimport MemoryCard from './MemoryCard';\nexport var GameBoard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GameBoard, _Component);\n\n  function GameBoard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GameBoard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GameBoard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      memoryCards: []\n    };\n\n    _this.countFlippedCards = function () {\n      var memoryCards = _this.state.memoryCards;\n      return memoryCards.filter(function (_ref) {\n        var flipped = _ref.flipped,\n            found = _ref.found;\n        return flipped && !found;\n      }).length;\n    };\n\n    _this.flipCard = function (id, cb) {\n      _this.setState(function (prevState) {\n        return {\n          memorycards: prevState.memoryCards.map(function (card) {\n            if (card.id === id) {\n              card.flipped = true;\n            }\n\n            return card;\n          })\n        };\n      }, function () {\n        return cb ? cb() : null;\n      });\n    };\n\n    _this.handleFlip = function (id) {\n      switch (_this.countFlippedCards()) {\n        case 0:\n          _this.flipCard(id);\n\n          break;\n\n        case 1:\n          _this.props.click();\n\n          _this.flipCard(id, function () {\n            _this.isMatch();\n          });\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.isMatch = function () {\n      var memoryCards = _this.state.memoryCards;\n      var flippedCards = memoryCards.filter(function (card) {\n        return card.flipped && !card.found;\n      });\n\n      if (flippedCards[0].matchesId === flippedCards[1].id || flippedCards[1].matchesId === flippedCards[0].id) {\n        _this.setState(function (prevState) {\n          return {\n            memoryCards: prevState.memoryCards.map(function (card) {\n              switch (card.id) {\n                case flippedCards[0].id:\n                case flippedCards[1].id:\n                  card.found = true;\n                  return card;\n\n                default:\n                  return card;\n              }\n            })\n          };\n        }, function () {\n          return _this.hasWon();\n        });\n      } else {\n        setTimeout(function () {\n          memoryCards[memoryCards.indexOf(flippedCards[0])].flipped = false;\n          memoryCards[memoryCards.indexOf(flippedCards[1])].flipped = false;\n\n          _this.setState({\n            memoryCards: memoryCards\n          });\n        }, 800);\n      }\n    };\n\n    _this.hasWon = function () {\n      var memoryCards = _this.state.memoryCards;\n      var won = memoryCards.every(function (card) {\n        return card.found;\n      });\n\n      if (won) {\n        _this.props.won();\n      }\n    };\n\n    _this.createBoard = function () {\n      return _this.state.memoryCards.length ? _this.state.memoryCards.map(function (card) {\n        return React.createElement(MemoryCard, {\n          key: card.id,\n          flipped: card.flipped,\n          found: card.found,\n          id: card.id,\n          imgUrl: card.url,\n          flip: _this.handleFlip,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        });\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Loading cards...\");\n    };\n\n    return _this;\n  }\n\n  _createClass(GameBoard, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.memoryCards !== this.state.memoryCards) {\n        this.setState({\n          memoryCards: this.state.memoryCards\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        memoryCards: this.props.cards\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"cards\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, this.createBoard());\n    }\n  }]);\n\n  return GameBoard;\n}(Component);\nexport default GameBoard;","map":{"version":3,"sources":["/home/amit/Downloads/reactjs-memory-game-master/src/components/GameBoard.js"],"names":["React","Component","MemoryCard","GameBoard","state","memoryCards","countFlippedCards","filter","flipped","found","length","flipCard","id","cb","setState","prevState","memorycards","map","card","handleFlip","props","click","isMatch","flippedCards","matchesId","hasWon","setTimeout","indexOf","won","every","createBoard","url","prevProps","cards"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MemoryCard from './MemoryCard';\n\nexport class GameBoard extends Component {\n\n  state = {\n    memoryCards: []\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.memoryCards !== this.state.memoryCards) {\n      this.setState({\n        memoryCards: this.state.memoryCards\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      memoryCards: this.props.cards\n    });\n  }\n\n  countFlippedCards = () => {\n    const { memoryCards } = this.state;\n    return memoryCards.filter(({ flipped, found }) => flipped && !found).length;\n  };\n\n  flipCard = (id, cb) => {\n    this.setState(prevState => (\n      {\n        memorycards: prevState.memoryCards.map(card => {\n          if (card.id === id) {\n            card.flipped = true;\n          }\n          return card;\n        })\n      }), () => cb ? cb() : null\n    );\n  };\n\n  handleFlip = id => {\n    switch (this.countFlippedCards()) {\n      case 0:\n        this.flipCard(id);\n        break;\n      case 1:\n        this.props.click();\n        this.flipCard(id, () => {\n          this.isMatch();\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  isMatch = () => {\n    const { memoryCards } = this.state;\n    const flippedCards = memoryCards.filter(card => card.flipped && !card.found);\n    if (flippedCards[0].matchesId === flippedCards[1].id ||\n      flippedCards[1].matchesId === flippedCards[0].id) {\n      this.setState(prevState => ({\n        memoryCards: prevState.memoryCards.map(card => {\n          switch (card.id) {\n            case flippedCards[0].id:\n            case flippedCards[1].id:\n              card.found = true;\n              return card;\n            default:\n              return card;\n          }\n        })\n      }), () => this.hasWon());\n    } else {\n      setTimeout(() => {\n        memoryCards[memoryCards.indexOf(flippedCards[0])].flipped = false;\n        memoryCards[memoryCards.indexOf(flippedCards[1])].flipped = false;\n        this.setState({\n          memoryCards: memoryCards\n        });\n      }, 800);\n    }\n  };\n\n\n  hasWon = () => {\n    const { memoryCards } = this.state;\n    let won = memoryCards.every(card => card.found);\n    if (won) {\n      this.props.won();\n    }\n  };\n\n\n  createBoard = () =>\n    this.state.memoryCards.length ? (\n      this.state.memoryCards.map(card => (\n        <MemoryCard\n          key={card.id}\n          flipped={card.flipped}\n          found={card.found}\n          id={card.id}\n          imgUrl={card.url}\n          flip={this.handleFlip} />\n      ))\n    ) : (\n        <p>Loading cards...</p>\n      );\n\n  render() {\n    return (\n      <div className=\"cards\">\n        {this.createBoard()}\n      </div>\n    );\n  }\n}\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}