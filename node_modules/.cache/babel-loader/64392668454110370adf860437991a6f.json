{"ast":null,"code":"import _classCallCheck from\"/home/amit/Documents/amit per/amitgame/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/amit/Documents/amit per/amitgame/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/home/amit/Documents/amit per/amitgame/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/home/amit/Documents/amit per/amitgame/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import MemoryCard from'./MemoryCard';import{jsx as _jsx}from\"react/jsx-runtime\";export var GameBoard=/*#__PURE__*/function(_Component){_inherits(GameBoard,_Component);var _super=_createSuper(GameBoard);function GameBoard(){var _this;_classCallCheck(this,GameBoard);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={memoryCards:[]};_this.countFlippedCards=function(){var memoryCards=_this.state.memoryCards;return memoryCards.filter(function(_ref){var flipped=_ref.flipped,found=_ref.found;return flipped&&!found;}).length;};_this.flipCard=function(id,cb){_this.setState(function(prevState){return{memorycards:prevState.memoryCards.map(function(card){if(card.id===id){card.flipped=true;}return card;})};},function(){return cb?cb():null;});};_this.handleFlip=function(id){switch(_this.countFlippedCards()){case 0:_this.flipCard(id);break;case 1:_this.props.click();_this.flipCard(id,function(){_this.isMatch();});break;default:break;}};_this.isMatch=function(){var memoryCards=_this.state.memoryCards;var flippedCards=memoryCards.filter(function(card){return card.flipped&&!card.found;});if(flippedCards[0].matchesId===flippedCards[1].id||flippedCards[1].matchesId===flippedCards[0].id){_this.setState(function(prevState){return{memoryCards:prevState.memoryCards.map(function(card){switch(card.id){case flippedCards[0].id:case flippedCards[1].id:card.found=true;return card;default:return card;}})};},function(){return _this.hasWon();});}else{setTimeout(function(){memoryCards[memoryCards.indexOf(flippedCards[0])].flipped=false;memoryCards[memoryCards.indexOf(flippedCards[1])].flipped=false;_this.setState({memoryCards:memoryCards});},800);}};_this.hasWon=function(){var memoryCards=_this.state.memoryCards;var won=memoryCards.every(function(card){return card.found;});if(won){_this.props.won();}};_this.createBoard=function(){return _this.state.memoryCards.length?_this.state.memoryCards.map(function(card){return/*#__PURE__*/_jsx(MemoryCard,{flipped:card.flipped,found:card.found,id:card.id,imgUrl:card.url,flip:_this.handleFlip},card.id);}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading cards...\"});};return _this;}_createClass(GameBoard,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){if(prevState.memoryCards!==this.state.memoryCards){this.setState({memoryCards:this.state.memoryCards});}}},{key:\"componentDidMount\",value:function componentDidMount(){this.setState({memoryCards:this.props.cards});}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(\"div\",{className:\"cards\",children:this.createBoard()});}}]);return GameBoard;}(Component);export default GameBoard;","map":{"version":3,"sources":["/home/amit/Documents/amit per/amitgame/src/components/GameBoard.js"],"names":["React","Component","MemoryCard","GameBoard","state","memoryCards","countFlippedCards","filter","flipped","found","length","flipCard","id","cb","setState","prevState","memorycards","map","card","handleFlip","props","click","isMatch","flippedCards","matchesId","hasWon","setTimeout","indexOf","won","every","createBoard","url","prevProps","cards"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MemoryCard from './MemoryCard';\n\nexport class GameBoard extends Component {\n\n  state = {\n    memoryCards: []\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.memoryCards !== this.state.memoryCards) {\n      this.setState({\n        memoryCards: this.state.memoryCards\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      memoryCards: this.props.cards\n    });\n  }\n\n  countFlippedCards = () => {\n    const { memoryCards } = this.state;\n    return memoryCards.filter(({ flipped, found }) => flipped && !found).length;\n  };\n\n  flipCard = (id, cb) => {\n    this.setState(prevState => (\n      {\n        memorycards: prevState.memoryCards.map(card => {\n          if (card.id === id) {\n            card.flipped = true;\n          }\n          return card;\n        })\n      }), () => cb ? cb() : null\n    );\n  };\n\n  handleFlip = id => {\n    switch (this.countFlippedCards()) {\n      case 0:\n        this.flipCard(id);\n        break;\n      case 1:\n        this.props.click();\n        this.flipCard(id, () => {\n          this.isMatch();\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  isMatch = () => {\n    const { memoryCards } = this.state;\n    const flippedCards = memoryCards.filter(card => card.flipped && !card.found);\n    if (flippedCards[0].matchesId === flippedCards[1].id ||\n      flippedCards[1].matchesId === flippedCards[0].id) {\n      this.setState(prevState => ({\n        memoryCards: prevState.memoryCards.map(card => {\n          switch (card.id) {\n            case flippedCards[0].id:\n            case flippedCards[1].id:\n              card.found = true;\n              return card;\n            default:\n              return card;\n          }\n        })\n      }), () => this.hasWon());\n    } else {\n      setTimeout(() => {\n        memoryCards[memoryCards.indexOf(flippedCards[0])].flipped = false;\n        memoryCards[memoryCards.indexOf(flippedCards[1])].flipped = false;\n        this.setState({\n          memoryCards: memoryCards\n        });\n      }, 800);\n    }\n  };\n\n\n  hasWon = () => {\n    const { memoryCards } = this.state;\n    let won = memoryCards.every(card => card.found);\n    if (won) {\n      this.props.won();\n    }\n  };\n\n\n  createBoard = () =>\n    this.state.memoryCards.length ? (\n      this.state.memoryCards.map(card => (\n        <MemoryCard\n          key={card.id}\n          flipped={card.flipped}\n          found={card.found}\n          id={card.id}\n          imgUrl={card.url}\n          flip={this.handleFlip} />\n      ))\n    ) : (\n        <p>Loading cards...</p>\n      );\n\n  render() {\n    return (\n      <div className=\"cards\">\n        {this.createBoard()}\n      </div>\n    );\n  }\n}\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}