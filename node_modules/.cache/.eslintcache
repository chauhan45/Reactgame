[{"/home/amit/Documents/amit projects/main amitgame/amitgame/src/index.js":"1","/home/amit/Documents/amit projects/main amitgame/amitgame/src/App.js":"2","/home/amit/Documents/amit projects/main amitgame/amitgame/src/Screen/Home.js":"3","/home/amit/Documents/amit projects/main amitgame/amitgame/src/Screen/Navbar.js":"4","/home/amit/Documents/amit projects/main amitgame/amitgame/src/components/GameBoard.js":"5","/home/amit/Documents/amit projects/main amitgame/amitgame/src/components/NewGame.js":"6","/home/amit/Documents/amit projects/main amitgame/amitgame/src/components/PlayAgain.js":"7","/home/amit/Documents/amit projects/main amitgame/amitgame/src/components/MemoryCard.js":"8","/home/amit/Documents/amit projects/main amitgame/amitgame/src/tiktak/tictactoe-v2.js":"9","/home/amit/Documents/amit projects/main amitgame/amitgame/src/tiktak/tictactoe-v3.js":"10","/home/amit/Documents/amit projects/main amitgame/amitgame/src/Tiktakapp.js":"11","/home/amit/Documents/amit projects/main amitgame/amitgame/src/Screen/Main.js":"12"},{"size":602,"mtime":1649915820476,"results":"13","hashOfConfig":"14"},{"size":3040,"mtime":1649915436383,"results":"15","hashOfConfig":"14"},{"size":353,"mtime":1649915344230,"results":"16","hashOfConfig":"14"},{"size":1182,"mtime":1649915916162,"results":"17","hashOfConfig":"14"},{"size":2742,"mtime":1649843882698,"results":"18","hashOfConfig":"14"},{"size":605,"mtime":1649858932271,"results":"19","hashOfConfig":"14"},{"size":229,"mtime":1649843882698,"results":"20","hashOfConfig":"14"},{"size":1169,"mtime":1649843882698,"results":"21","hashOfConfig":"14"},{"size":3255,"mtime":1577385277000,"results":"22","hashOfConfig":"14"},{"size":4873,"mtime":1577385277000,"results":"23","hashOfConfig":"14"},{"size":968,"mtime":1649916123342,"results":"24","hashOfConfig":"14"},{"size":5872,"mtime":1649916173275,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xvmdr0",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/amit/Documents/amit projects/main amitgame/amitgame/src/index.js",[],[],"/home/amit/Documents/amit projects/main amitgame/amitgame/src/App.js",["65","66"],[],"/home/amit/Documents/amit projects/main amitgame/amitgame/src/Screen/Home.js",["67","68","69"],[],"/home/amit/Documents/amit projects/main amitgame/amitgame/src/Screen/Navbar.js",["70","71","72"],[],"/home/amit/Documents/amit projects/main amitgame/amitgame/src/components/GameBoard.js",[],[],[],"/home/amit/Documents/amit projects/main amitgame/amitgame/src/components/NewGame.js",["73"],[],"import React, { Component } from \"react\";\nimport memory from '../img/memory.png'\nexport class NewGame extends Component {\n\n  state = {\n    visible: true,\n  }\n\n  handleClick = e => {\n    this.setState({ visible: !this.state.visible }, () => {\n      this.props.play()\n    });\n  };\n\n  render() {\n    const { visible } = this.state;\n    return (\n      <div className=\"menu-item\">\n        <button className=\"btn btn-play\"\n          onClick={this.handleClick}\n          style={{ visibility: visible ? \"visible\" : \"hidden\" }}>\n          Play\n        </button>\n      </div >\n    );\n  }\n}\n\nexport default NewGame;\n","/home/amit/Documents/amit projects/main amitgame/amitgame/src/components/PlayAgain.js",[],[],"/home/amit/Documents/amit projects/main amitgame/amitgame/src/components/MemoryCard.js",[],[],"/home/amit/Documents/amit projects/main amitgame/amitgame/src/tiktak/tictactoe-v2.js",[],[],"/home/amit/Documents/amit projects/main amitgame/amitgame/src/tiktak/tictactoe-v3.js",["74"],[],"import React, { useState, useEffect } from \"react\";\nimport shuffle from \"lodash/shuffle\";\nimport range from \"lodash/range\";\nimport \"./tictactoe.css\";\n\nfunction Block({ pos, grid, onClick }) {\n  return (\n    <div className=\"block\" onClick={() => onClick(pos)}>\n      {grid[pos]}\n    </div>\n  );\n}\n\nconst GameStatus = {\n  Init: \"Init\",\n  Playing: \"Playing\",\n  End: \"End\"\n};\n\nconst initState = {\n  grid: Array(9).fill(null),\n  turn: null,\n  gameStatus: GameStatus.Init,\n  winner: null,\n  you: null\n};\n\nconst Strategy = {\n  random: grid => {\n    const avail = [];\n    grid.forEach((block, i) => {\n      if (block === null) avail.push(i);\n    });\n\n    if (avail.length === 0) return null;\n    return avail[Math.floor(Math.random() * avail.length)];\n  },\n\n  minimax: (grid, turn) => {\n    const [gameStatus, winner] = gameCheck(grid);\n    if (gameStatus === GameStatus.End) {\n      if (winner === null) return [null, 0];\n      return [null, -1];\n    }\n\n    let score = Number.MIN_SAFE_INTEGER;\n    let posChoice = null;\n    const nextTurn = turn === \"O\" ? \"X\" : \"O\";\n\n    for (let pos of shuffle(range(grid.length))) {\n      if (grid[pos] === null) {\n        grid[pos] = turn;\n\n        const [, oppoScore] = Strategy.minimax(grid, nextTurn);\n        if (-oppoScore > score) {\n          score = -oppoScore;\n          posChoice = pos;\n        }\n\n        grid[pos] = null;\n\n        if (score === 1) break;\n      }\n    }\n    return [posChoice, score];\n  }\n};\n\nconst WIN_CONDITIONS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6]\n];\n\nconst gameCheck = grid => {\n  if (grid.filter(block => block === null).length === 0) {\n    return [GameStatus.End, null];\n  }\n\n  for (const cond of WIN_CONDITIONS) {\n    if (cond.filter(idx => grid[idx] === \"O\").length === 3) {\n      return [GameStatus.End, \"O\"];\n    }\n\n    if (cond.filter(idx => grid[idx] === \"X\").length === 3) {\n      return [GameStatus.End, \"X\"];\n    }\n  }\n\n  return [GameStatus.Playing, null];\n};\n\nfunction TicTacToe({ difficulty }) {\n  const [state, setState] = useState(initState);\n  const { grid, turn, gameStatus, winner, you } = state;\n\n  useEffect(() => {\n    if (turn !== you && gameStatus === GameStatus.Playing)\n      setTimeout(aiMove, 500);\n  }, [state]);\n\n  const start = choice => {\n    setState(preState => ({\n      ...preState,\n      grid: Array(9).fill(null),\n      turn: \"O\",\n      gameStatus: GameStatus.Playing,\n      winner: null,\n      you: choice\n    }));\n  };\n\n  const move = pos => {\n    if (grid[pos] === null) {\n      const newGrid = [...grid];\n      newGrid[pos] = turn;\n\n      const [gameStatus, winner] = gameCheck(newGrid);\n\n      let nextTurn = turn === \"O\" ? \"X\" : \"O\";\n      if (gameStatus !== GameStatus.Playing) {\n        nextTurn = null;\n      }\n\n      setState(preState => ({\n        ...preState,\n        grid: newGrid,\n        gameStatus,\n        turn: nextTurn,\n        winner\n      }));\n    }\n  };\n\n  const youMove = pos => {\n    if (turn === you) move(pos);\n  };\n\n  const aiMove = () => {\n    let pos;\n\n    if (difficulty === \"impossible\") {\n      [pos] = Strategy.minimax(grid, turn);\n    } else {\n      pos = Strategy.random(state.grid);\n    }\n\n    move(pos);\n  };\n\n  return (\n    <div className=\"game\">\n      <div className=\"box\">\n        <div className=\"row\">\n          <Block pos={0} grid={grid} onClick={youMove} />\n          <Block pos={1} grid={grid} onClick={youMove} />\n          <Block pos={2} grid={grid} onClick={youMove} />\n        </div>\n        <div className=\"row\">\n          <Block pos={3} grid={grid} onClick={youMove} />\n          <Block pos={4} grid={grid} onClick={youMove} />\n          <Block pos={5} grid={grid} onClick={youMove} />\n        </div>\n        <div className=\"row\">\n          <Block pos={6} grid={grid} onClick={youMove} />\n          <Block pos={7} grid={grid} onClick={youMove} />\n          <Block pos={8} grid={grid} onClick={youMove} />\n        </div>\n      </div>\n      {gameStatus !== GameStatus.Playing && <div className=\"overlay\" />}\n      {gameStatus === GameStatus.Init && (\n        <div className=\"panel\">\n          <div>Tic Tac Toe</div>\n          <div className=\"actions\">\n            <div className=\"start-btn\" onClick={() => start(\"O\")}>\n              O\n            </div>\n            <div className=\"start-btn\" onClick={() => start(\"X\")}>\n              X\n            </div>\n          </div>\n        </div>\n      )}\n      {gameStatus === GameStatus.End && (\n        <div className=\"panel\">\n          <div>{winner ? `Winner: ${winner}` : \"Draw\"}</div>\n          <div className=\"actions\">\n            <div className=\"start-btn\" onClick={() => start(\"O\")}>\n              O\n            </div>\n            <div className=\"start-btn\" onClick={() => start(\"X\")}>\n              X\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default TicTacToe;\n","/home/amit/Documents/amit projects/main amitgame/amitgame/src/Tiktakapp.js",[],[],"/home/amit/Documents/amit projects/main amitgame/amitgame/src/Screen/Main.js",["75","76","77","78","79","80","81","82","83","84"],[],{"ruleId":"85","severity":1,"message":"86","line":13,"column":3,"nodeType":"87","messageId":"88","endLine":13,"endColumn":7},{"ruleId":"89","severity":1,"message":"90","line":25,"column":11,"nodeType":"87","messageId":"91","endLine":25,"endColumn":14},{"ruleId":"85","severity":1,"message":"92","line":3,"column":8,"nodeType":"87","messageId":"88","endLine":3,"endColumn":12},{"ruleId":"85","severity":1,"message":"93","line":4,"column":8,"nodeType":"87","messageId":"88","endLine":4,"endColumn":14},{"ruleId":"85","severity":1,"message":"86","line":5,"column":10,"nodeType":"87","messageId":"88","endLine":5,"endColumn":14},{"ruleId":"85","severity":1,"message":"94","line":5,"column":8,"nodeType":"87","messageId":"88","endLine":5,"endColumn":16},{"ruleId":"95","severity":1,"message":"96","line":11,"column":3,"nodeType":"97","endLine":11,"endColumn":36},{"ruleId":"95","severity":1,"message":"96","line":26,"column":9,"nodeType":"97","endLine":26,"endColumn":47},{"ruleId":"85","severity":1,"message":"93","line":2,"column":8,"nodeType":"87","messageId":"88","endLine":2,"endColumn":14},{"ruleId":"98","severity":1,"message":"99","line":105,"column":6,"nodeType":"100","endLine":105,"endColumn":13,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":65,"column":15,"nodeType":"97","endLine":65,"endColumn":106},{"ruleId":"102","severity":1,"message":"103","line":79,"column":15,"nodeType":"97","endLine":79,"endColumn":82},{"ruleId":"102","severity":1,"message":"103","line":92,"column":15,"nodeType":"97","endLine":92,"endColumn":75},{"ruleId":"95","severity":1,"message":"96","line":99,"column":17,"nodeType":"97","endLine":99,"endColumn":53},{"ruleId":"102","severity":1,"message":"103","line":114,"column":15,"nodeType":"97","endLine":114,"endColumn":75},{"ruleId":"95","severity":1,"message":"96","line":121,"column":17,"nodeType":"97","endLine":121,"endColumn":53},{"ruleId":"102","severity":1,"message":"103","line":129,"column":15,"nodeType":"97","endLine":129,"endColumn":75},{"ruleId":"95","severity":1,"message":"96","line":136,"column":17,"nodeType":"97","endLine":136,"endColumn":53},{"ruleId":"102","severity":1,"message":"103","line":144,"column":15,"nodeType":"97","endLine":144,"endColumn":75},{"ruleId":"95","severity":1,"message":"96","line":151,"column":17,"nodeType":"97","endLine":151,"endColumn":53},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-use-before-define","'App' was used before it was defined.","usedBeforeDefined","'Ludo' is defined but never used.","'memory' is defined but never used.","'Titakapp' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'aiMove', 'gameStatus', 'turn', and 'you'. Either include them or remove the dependency array.","ArrayExpression",["104"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",{"desc":"105","fix":"106"},"Update the dependencies array to be: [aiMove, gameStatus, state, turn, you]",{"range":"107","text":"108"},[2262,2269],"[aiMove, gameStatus, state, turn, you]"]