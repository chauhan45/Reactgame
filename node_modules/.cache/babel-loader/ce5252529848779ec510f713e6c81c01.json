{"ast":null,"code":"import _classCallCheck from \"/home/amit/Documents/amit projects/reactjs-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/amit/Documents/amit projects/reactjs-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/amit/Documents/amit projects/reactjs-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/amit/Documents/amit projects/reactjs-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/amit/Documents/amit projects/reactjs-memory-game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/amit/Documents/amit projects/reactjs-memory-game-master/src/App.js\";\nimport React, { Component } from \"react\";\nimport GameBoard from \"./components/GameBoard\";\nimport NewGame from \"./components/NewGame\";\nimport PlayAgain from './components/PlayAgain';\nimport Navbar from \"./Screen/Navbar\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = App.initState();\n\n    _this.countClicks = function () {\n      _this.setState(function (prevState) {\n        return {\n          clicks: prevState.clicks + 1\n        };\n      });\n    };\n\n    _this.generateDeck = function () {\n      var amount = 10;\n      var cards = [];\n\n      for (var i = 1; i < amount + 1; i++) {\n        var id = createId();\n        var id2 = createId();\n        var rand = Math.floor(Math.random() * 300) + 1;\n        var card1 = {\n          id: id,\n          matchesId: id2,\n          url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\".concat(rand, \".png\"),\n          flipped: false,\n          found: false\n        };\n        var card2 = {\n          id: id2,\n          matchesId: id,\n          url: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\".concat(rand, \".png\"),\n          flipped: false,\n          found: false\n        };\n        cards.push(card1);\n        cards.push(card2);\n      }\n\n      _this.shuffleCards(cards);\n\n      _this.setState({\n        cards: cards\n      });\n    };\n\n    _this.shuffleCards = function (a) {\n      for (var i = a.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var _ref = [a[j], a[i]];\n        a[i] = _ref[0];\n        a[j] = _ref[1];\n      }\n\n      return a;\n    };\n\n    _this.resetGame = function () {\n      _this.setState(App.initState(), function () {\n        _this.initGame();\n      });\n    };\n\n    _this.hasWon = function () {\n      _this.setState({\n        won: true\n      });\n    };\n\n    _this.initGame = function () {\n      _this.generateDeck();\n\n      _this.setState({\n        newGame: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          cards = _this$state.cards,\n          newGame = _this$state.newGame,\n          won = _this$state.won,\n          clicks = _this$state.clicks;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"board-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, newGame ? React.createElement(GameBoard, {\n        cards: cards,\n        won: this.hasWon,\n        click: this.countClicks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }) : null, newGame && React.createElement(\"p\", {\n        className: \"message center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Total flips: \", clicks)), React.createElement(\"div\", {\n        className: \"menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, won && React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"You win!\")), React.createElement(NewGame, {\n        play: this.initGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), won && React.createElement(PlayAgain, {\n        again: this.resetGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nApp.initState = function () {\n  return {\n    newGame: false,\n    won: false,\n    cards: [],\n    clicks: 0\n  };\n};\n\nexport default App;\n\nvar createId = function createId() {\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n};","map":{"version":3,"sources":["/home/amit/Documents/amit projects/reactjs-memory-game-master/src/App.js"],"names":["React","Component","GameBoard","NewGame","PlayAgain","Navbar","App","state","initState","countClicks","setState","prevState","clicks","generateDeck","amount","cards","i","id","createId","id2","rand","Math","floor","random","card1","matchesId","url","flipped","found","card2","push","shuffleCards","a","length","j","resetGame","initGame","hasWon","won","newGame","toString","substring"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport GameBoard from \"./components/GameBoard\";\nimport NewGame from \"./components/NewGame\";\nimport PlayAgain from './components/PlayAgain';\nimport Navbar from \"./Screen/Navbar\";\n\nclass App extends Component {\n\n\n  static initState = () => {\n    return {\n      newGame: false,\n      won: false,\n      cards: [],\n      clicks : 0\n    };\n  }\n\n  state = App.initState();\n\n  countClicks = () => {\n    this.setState((prevState) => ({\n        clicks : prevState.clicks + 1\n    }));\n  }\n\n  generateDeck = () => {\n    let amount = 10;\n    let cards = [];\n    for (let i = 1; i < amount + 1; i++) {\n      let id = createId();\n      let id2 = createId();\n      let rand = Math.floor(Math.random() * 300) + 1;\n      const card1 = {\n        id: id,\n        matchesId: id2,\n        url: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${rand}.png`,\n        flipped: false,\n        found: false,\n      }\n      const card2 = {\n        id: id2,\n        matchesId: id,\n        url: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${rand}.png`,\n        flipped: false,\n        found: false,\n      }\n      cards.push(card1);\n      cards.push(card2);\n    }\n    this.shuffleCards(cards);\n    this.setState({\n      cards: cards\n    });\n  }\n\n  shuffleCards = (a) => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  resetGame = () => {\n    this.setState(App.initState(), () => {\n      this.initGame()\n    });\n  }\n\n  hasWon = () => {\n    this.setState({\n      won: true\n    });\n  };\n\n  initGame = () => {\n    this.generateDeck();\n    this.setState({\n      newGame: true\n    });\n  };\n\n  render() {\n    const { cards, newGame, won, clicks } = this.state;\n    return (\n      <div>\n        <Navbar/>\n        <div className=\"board-container\">\n          {newGame ?\n            (<GameBoard cards={cards} won={this.hasWon} click={this.countClicks} />)\n            : null}\n            {newGame && (<p className=\"message center\">Total flips: {clicks}</p>)}\n        </div>\n\n        <div className=\"menu\">\n        <div className=\"message\">\n            {won && (<h2>You win!</h2>)}\n          </div>\n          <NewGame play={this.initGame} />\n          {won && (<PlayAgain again={this.resetGame} />)}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n\nconst createId = () => {\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}"]},"metadata":{},"sourceType":"module"}